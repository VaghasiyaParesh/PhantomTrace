name: PhantomTrace CI

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main" ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # ============================================================================
  # BASIC BUILD & TEST
  # ============================================================================
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable, beta]
        include:
          - os: ubuntu-latest
            rust: nightly
        exclude:
          - os: windows-latest
            rust: beta
          - os: macos-latest  
            rust: beta

    steps:
    - name: Checkout sources
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
        components: rustfmt, clippy

    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-${{ matrix.rust }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-${{ matrix.rust }}-

    - name: Build PhantomTrace
      run: cargo build --verbose --all-features

    - name: Run tests
      run: cargo test --verbose --all-features

    - name: Run integration tests
      run: cargo test --verbose --test '*'

  # ============================================================================
  # CODE QUALITY CHECKS
  # ============================================================================
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
    - name: Checkout sources
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    - name: Cache cargo
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ubuntu-quality-${{ hashFiles('**/Cargo.lock') }}

    - name: Check formatting
      run: cargo fmt --all -- --check

    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings

    - name: Check documentation
      run: cargo doc --no-deps --document-private-items --all-features
      env:
        RUSTDOCFLAGS: -D warnings

  # ============================================================================
  # SECURITY AUDIT
  # ============================================================================
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
    - name: Checkout sources
      uses: actions/checkout@v4

    - name: Install cargo-audit
      run: cargo install cargo-audit

    - name: Run security audit
      run: cargo audit

  # ============================================================================
  # EXAMPLES & BENCHMARKS
  # ============================================================================
  examples:
    name: Examples & Benchmarks
    runs-on: ubuntu-latest
    steps:
    - name: Checkout sources
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache cargo
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ubuntu-examples-${{ hashFiles('**/Cargo.lock') }}

    - name: Create sample data for examples
      run: |
        echo "User: test@example.com, Card: 4111-1111-1111-1111" > sample_logs.txt
        echo "Phone: 555-123-4567, SSN: 123-45-6789" >> sample_logs.txt

    - name: Run examples
      run: |
        cargo run --example basic_usage
        cargo run --example trace_report

    - name: Run CLI smoke test
      run: |
        cargo run -- --generate-config test_config.json
        cargo run -- -i sample_logs.txt -o phantomed.txt -c test_config.json
        cat phantomed.txt

    - name: Run benchmarks (if present)
      run: cargo bench --no-run
      continue-on-error: true

  # ============================================================================
  # MINIMUM SUPPORTED RUST VERSION (MSRV)
  # ============================================================================
  msrv:
    name: MSRV (Minimum Supported Rust Version)
    runs-on: ubuntu-latest
    steps:
    - name: Checkout sources  
      uses: actions/checkout@v4

    - name: Install Rust 1.70 (MSRV)
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: 1.70.0

    - name: Cache cargo
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ubuntu-msrv-${{ hashFiles('**/Cargo.lock') }}

    - name: Test with MSRV
      run: cargo test --verbose

  # ============================================================================
  # RELEASE BUILDS (only on tags)
  # ============================================================================
  release:
    name: Release Builds
    runs-on: ${{ matrix.os }}
    if: startsWith(github.ref, 'refs/tags/')
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: phantomtrace
            asset_name: phantomtrace-linux-x86_64
          - os: windows-latest  
            target: x86_64-pc-windows-msvc
            artifact_name: phantomtrace.exe
            asset_name: phantomtrace-windows-x86_64.exe
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: phantomtrace
            asset_name: phantomtrace-macos-x86_64

    steps:
    - name: Checkout sources
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Build release binary
      run: cargo build --release --target ${{ matrix.target }}

    - name: Upload release asset
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.asset_name }}
        path: target/${{ matrix.target }}/release/${{ matrix.artifact_name }}
